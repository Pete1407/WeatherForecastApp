plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'kotlin-android'
    id 'kotlin-parcelize'
}

android {
    namespace 'com.example.weatherforecastapp'
    compileSdk 32

    defaultConfig {
        applicationId "com.example.weatherforecastapp"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        def localPropertiesFile = rootProject.file("local.properties")
        def localProperties = new Properties()
        localProperties.load(new FileInputStream(localPropertiesFile))
        buildConfigField "String","API_KEY","\"${localProperties.getProperty("API_KEY")}\""
        buildConfigField "String","BASE_URL",BASE_URL
        buildConfigField "String","BASE_URL_IMAGE",BASE_URL_FOR_IMAGE
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{
        kotlinOptions{
            freeCompilerArgs +=["-Xjvm-default=all",]
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures{
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.test:monitor:1.5.0'
    def hilt_version = "2.44"
    def lifecycle_version = "2.5.1"
    def coroutine_version = "1.6.4"
    def retrofit_version = "2.8.0"
    def lottieVersion = "3.5.0"
    def nav_version = "2.5.2"

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:2.4.0"
    testImplementation "org.powermock:powermock-core:1.7.0RC2"
    testImplementation "org.powermock:powermock-module-junit4:1.7.0RC2"
    testImplementation "org.powermock:powermock-api-mockito2:1.7.0RC2"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    // Hilt dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

    // Retrofit and Moshi
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.squareup.moshi:moshi-kotlin:1.13.0"

    // logging interceptor
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.3"

    // lottie animation
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:4.13.2"
    kapt "com.github.bumptech.glide:compiler:4.13.2"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Fragment KTX
    implementation "androidx.fragment:fragment-ktx:1.5.4"



}